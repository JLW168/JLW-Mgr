<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bank Statement Extractor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .file-input-button {
            cursor: pointer;
            border-radius: 0.5rem;
            padding: 0.75rem 1rem;
            font-weight: 500;
            color: white;
            background-color: #4f46e5;
            transition: background-color 0.2s;
        }
        .file-input-button:hover {
            background-color: #4338ca;
        }
        .file-name {
            font-style: italic;
            color: #6b7280;
            min-width: 120px;
            text-align: left;
        }
        th, td {
            white-space: nowrap;
        }
        .page {
            display: none;
        }
        .page.active {
            display: block;
        }
        /* --- Modern Sidebar Navigation Styles --- */
        #sidebar {
            transition: width 0.3s ease-in-out;
        }
        .nav-link {
            display: flex;
            align-items: center;
            gap: 0.75rem; /* 12px */
            padding: 0.75rem 1rem; /* 12px 16px */
            border-radius: 0.5rem; /* rounded-lg */
            font-size: 0.875rem; /* text-sm */
            font-weight: 500; /* font-medium */
            color: #94a3b8; /* text-slate-400 */
            transition: background-color 0.2s, color 0.2s;
            overflow: hidden;
        }
        .nav-link:hover {
            background-color: #1e293b; /* bg-slate-800 */
            color: #f8fafc; /* text-slate-50 */
        }
        .nav-link.active {
            background-color: #4f46e5; /* bg-indigo-600 */
            color: #ffffff; /* text-white */
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        /* --- Collapsed Sidebar Styles --- */
        #sidebar.is-collapsed {
            width: 5rem; /* 80px */
        }
        #sidebar.is-collapsed .sidebar-text, #sidebar.is-collapsed .app-logo-text {
            opacity: 0;
            width: 0;
            visibility: hidden;
        }
        #sidebar.is-collapsed .nav-link, #sidebar.is-collapsed .app-logo-container {
            justify-content: center;
            padding-left: 0;
            padding-right: 0;
        }
        #sidebar.is-collapsed #sidebar-toggle-btn svg {
            transform: rotate(180deg);
        }
        .sidebar-text, .app-logo-text {
            transition: opacity 0.2s, width 0.2s;
            white-space: nowrap;
        }
        #sidebar-toggle-btn svg {
            transition: transform 0.3s ease-in-out;
        }

        .filter-input {
            border-color: #d1d5db;
        }
        .pagination-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            border: 1px solid #d1d5db;
            background-color: white;
            transition: background-color 0.2s;
        }
        .pagination-btn:hover:not(:disabled) {
            background-color: #f3f4f6;
        }
        .pagination-btn.active {
            background-color: #4f46e5;
            color: white;
            border-color: #4f46e5;
        }
        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4f46e5;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="hidden fixed inset-0 bg-gray-900 bg-opacity-75 flex flex-col items-center justify-center z-50">
        <div class="loader"></div>
        <p class="text-white text-xl font-semibold mt-4">Processing files, please wait...</p>
    </div>

    <div class="flex h-screen bg-gray-200">
        <!-- Sidebar -->
        <aside id="sidebar" class="w-64 bg-slate-900 text-white flex flex-col p-4 transition-all duration-300">
            <div class="flex flex-col flex-1">
                <!-- App Logo -->
                <div class="flex items-center gap-x-3 px-2 py-4 app-logo-container">
                    <div class="h-8 w-8 flex-shrink-0 flex items-center justify-center rounded-lg bg-indigo-600">
                         <svg class="h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                        </svg>
                    </div>
                    <h1 class="text-xl font-semibold text-white app-logo-text">Statement App</h1>
                </div>
                <!-- Navigation Links -->
                <nav class="mt-6 flex-1 flex flex-col gap-y-2">
                    <a href="#" id="nav-dashboard" class="nav-link active" onclick="switchPage('dashboard')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" /></svg>
                        <span class="sidebar-text">Dashboard</span>
                    </a>
                    <a href="#" id="nav-reports" class="nav-link" onclick="switchPage('reports')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm3 2a1 1 0 00-2 0v6a1 1 0 102 0V5zm2 0a1 1 0 00-2 0v6a1 1 0 102 0V5zm4 0a1 1 0 10-2 0v6a1 1 0 102 0V5z" clip-rule="evenodd" /></svg>
                        <span class="sidebar-text">Summary Reports</span>
                    </a>
                </nav>
            </div>
            <!-- Sidebar Toggle Button -->
            <div class="pt-4 border-t border-slate-700">
                <button id="sidebar-toggle-btn" class="w-full flex items-center justify-center p-2 rounded-lg hover:bg-slate-700">
                    <svg class="w-6 h-6 text-slate-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
                    </svg>
                </button>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 flex flex-col overflow-hidden">
            <!-- Header -->
            <header class="bg-white shadow-md p-4 flex items-center justify-between">
                 <div id="header-placeholder" class="text-center text-gray-500 flex-1">Process files to see summary and download options.</div>
                <div id="controls" class="hidden flex-1 flex-col sm:flex-row items-center justify-end gap-4">
                     <div id="summary" class="flex flex-col sm:flex-row sm:flex-wrap items-center gap-x-6 gap-y-2 text-md font-medium text-gray-700"></div>
                     <button id="downloadReportBtn" class="w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 9.293a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                        Download Full Report (XLSX)
                    </button>
                </div>
            </header>

            <!-- Scrollable Content Area -->
            <div class="flex-1 overflow-y-auto p-6">
                <!-- Page 1: Dashboard -->
                <div id="dashboard-page" class="page active">
                     <div class="bg-white p-6 rounded-lg shadow-md">
                        <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Upload Statements</h2>
                        <div class="flex flex-col items-center justify-center gap-6 mb-8">
                            <div class="flex flex-col sm:flex-row items-center gap-4">
                                <label for="fileUpload1" class="file-input-button">Upload USD File (.txt)</label>
                                <input type="file" id="fileUpload1" class="hidden" accept=".txt">
                                <span id="fileName1" class="file-name text-sm">No file selected</span>
                            </div>
                            <div class="flex flex-col sm:flex-row items-center gap-4">
                                <label for="fileUpload2" class="file-input-button">Upload KHR File</label>
                                <input type="file" id="fileUpload2" class="hidden" accept=".txt,.csv,.xlsx,.xls">
                                <span id="fileName2" class="file-name text-sm">No file selected</span>
                            </div>
                            <button id="processBtn" class="hidden bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center transition-colors mt-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" /></svg>
                                Process Files
                            </button>
                        </div>
                    </div>
                    
                    <div id="mainTableContainer" class="mt-8 hidden">
                        <h2 class="text-xl font-semibold text-gray-700 mb-4">All Transactions</h2>
                        <!-- Filter Section -->
                        <div id="filter-bar" class="bg-white p-4 rounded-lg shadow-md mb-4">
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                                <input type="text" id="searchInput" placeholder="Search..." class="filter-input col-span-full lg:col-span-1 p-2 border rounded-md">
                                <input type="date" id="dateFilter" class="filter-input p-2 border rounded-md">
                                <select id="hourFilter" class="filter-input p-2 border rounded-md"><option value="">Filter by Hour</option></select>
                                <select id="bankFilter" class="filter-input p-2 border rounded-md"><option value="">Filter by Bank</option></select>
                                <div class="flex gap-2">
                                    <button id="applyFilterBtn" class="flex-1 bg-indigo-600 text-white p-2 rounded-md">Apply</button>
                                    <button id="resetFilterBtn" class="flex-1 bg-gray-500 text-white p-2 rounded-md">Reset</button>
                                </div>
                            </div>
                        </div>

                        <div class="overflow-x-auto bg-white rounded-lg shadow-md">
                            <table class="min-w-full">
                                <thead class="bg-gray-800 text-white">
                                    <tr>
                                        <th class="text-left py-3 px-4 uppercase font-semibold text-sm">Date</th>
                                        <th class="text-left py-3 px-4 uppercase font-semibold text-sm">Time</th>
                                        <th class="text-left py-3 px-4 uppercase font-semibold text-sm">Location</th>
                                        <th class="text-left py-3 px-4 uppercase font-semibold text-sm">From Bank</th>
                                        <th class="text-left py-3 px-4 uppercase font-semibold text-sm">From Name</th>
                                        <th class="text-left py-3 px-4 uppercase font-semibold text-sm">From Acc No.</th>
                                        <th class="text-right py-3 px-4 uppercase font-semibold text-sm">Amount (KHR)</th>
                                        <th class="text-right py-3 px-4 uppercase font-semibold text-sm">Amount (USD)</th>
                                    </tr>
                                </thead>
                                <tbody id="resultsBody" class="text-gray-700"></tbody>
                                <tfoot id="resultsFooter" class="bg-gray-200 font-bold"></tfoot>
                            </table>
                        </div>
                         <div id="pagination-controls" class="flex justify-between items-center mt-4"></div>
                    </div>
                </div>

                <!-- Page 2: Reports -->
                <div id="reports-page" class="page">
                    <div class="bg-white p-6 rounded-lg shadow-md" id="reports-content-to-capture">
                        <div class="flex justify-between items-center mb-8">
                             <h2 class="text-2xl font-bold text-gray-800">Summary Reports</h2>
                             <button id="downloadSummaryBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path d="M3 12a2 2 0 012-2h10a2 2 0 012 2v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-2z" /><path d="M7 6a2 2 0 012-2h2a2 2 0 012 2v1a2 2 0 01-2 2H9a2 2 0 01-2-2V6z" /></svg>
                                Download as Image (A4)
                            </button>
                        </div>
                        <div class="mb-8">
                            <h3 class="text-xl font-semibold text-gray-700 mb-4">Weekly Summary by Location</h3>
                            <div class="overflow-x-auto"><table class="min-w-full"><thead class="bg-gray-700 text-white"><tr class="text-left"><th class="p-3">No.</th><th class="p-3">Location</th><th class="p-3">Month-Year</th><th class="p-3">Week</th><th class="p-3 text-right">Total KHR</th><th class="p-3 text-right">Total USD</th><th class="p-3 text-center">Total Transactions</th></tr></thead><tbody id="weeklySummaryBody" class="text-gray-700"></tbody><tfoot id="weeklySummaryFooter" class="bg-gray-200 font-bold"></tfoot></table></div>
                        </div>
                        <div class="mb-8">
                            <h3 class="text-xl font-semibold text-gray-700 mb-4">Monthly Summary by Location</h3>
                            <div class="overflow-x-auto"><table class="min-w-full"><thead class="bg-gray-700 text-white"><tr class="text-left"><th class="p-3">No.</th><th class="p-3">Location</th><th class="p-3">Month-Year</th><th class="p-3 text-right">Total KHR</th><th class="p-3 text-right">Total USD</th><th class="p-3 text-center">Total Transactions</th></tr></thead><tbody id="locationSummaryBody" class="text-gray-700"></tbody><tfoot id="locationSummaryFooter" class="bg-gray-200 font-bold"></tfoot></table></div>
                        </div>
                        <div>
                             <h3 class="text-xl font-semibold text-gray-700 mb-4">Monthly Summary by Bank Sender</h3>
                             <div class="overflow-x-auto"><table class="min-w-full"><thead class="bg-gray-700 text-white"><tr class="text-left"><th class="p-3">No.</th><th class="p-3">Bank Name</th><th class="p-3">Month-Year</th><th class="p-3 text-center">Txn Count</th><th class="p-3 text-right">Total KHR</th><th class="p-3 text-right">Total USD</th><th class="p-3">Note</th></tr></thead><tbody id="bankSummaryBody" class="text-gray-700"></tbody><tfoot id="bankSummaryFooter" class="bg-gray-200 font-bold"></tfoot></table></div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // DOM Elements
        const fileUpload1 = document.getElementById('fileUpload1'), fileNameSpan1 = document.getElementById('fileName1');
        const fileUpload2 = document.getElementById('fileUpload2'), fileNameSpan2 = document.getElementById('fileName2');
        const processBtn = document.getElementById('processBtn');
        const resultsBody = document.getElementById('resultsBody'), locationSummaryBody = document.getElementById('locationSummaryBody'), bankSummaryBody = document.getElementById('bankSummaryBody'), weeklySummaryBody = document.getElementById('weeklySummaryBody');
        const resultsFooter = document.getElementById('resultsFooter'), locationSummaryFooter = document.getElementById('locationSummaryFooter'), bankSummaryFooter = document.getElementById('bankSummaryFooter'), weeklySummaryFooter = document.getElementById('weeklySummaryFooter');
        const controlsDiv = document.getElementById('controls'), summaryDiv = document.getElementById('summary'), headerPlaceholder = document.getElementById('header-placeholder');
        const downloadReportBtn = document.getElementById('downloadReportBtn');
        const downloadSummaryBtn = document.getElementById('downloadSummaryBtn');
        const mainTableContainer = document.getElementById('mainTableContainer');
        const navDashboard = document.getElementById('nav-dashboard'), navReports = document.getElementById('nav-reports');
        const dashboardPage = document.getElementById('dashboard-page'), reportsPage = document.getElementById('reports-page');
        const searchInput = document.getElementById('searchInput'), dateFilter = document.getElementById('dateFilter'), hourFilter = document.getElementById('hourFilter'), bankFilter = document.getElementById('bankFilter');
        const applyFilterBtn = document.getElementById('applyFilterBtn'), resetFilterBtn = document.getElementById('resetFilterBtn');
        const sidebar = document.getElementById('sidebar');
        const sidebarToggleBtn = document.getElementById('sidebar-toggle-btn');
        const loadingOverlay = document.getElementById('loading-overlay');
        const paginationControls = document.getElementById('pagination-controls');

        // State
        let transactionData = [], locationSummaryData = [], bankSummaryData = [], weeklySummaryData = [];
        let currentFilteredData = [];
        let selectedFile1 = null, selectedFile2 = null;
        let currentPage = 1;
        const rowsPerPage = 50;
        
        // Setup
        const setupFileUpload = (uploadEl, nameEl, fileVarSetter) => {
            uploadEl.addEventListener('change', (event) => {
                const file = event.target.files[0];
                fileVarSetter(file);
                nameEl.textContent = file ? file.name : 'No file selected';
                processBtn.classList.toggle('hidden', !selectedFile1 && !selectedFile2);
                resetUI();
            });
        };
        setupFileUpload(fileUpload1, fileNameSpan1, file => selectedFile1 = file);
        setupFileUpload(fileUpload2, fileNameSpan2, file => selectedFile2 = file);

        // Event Listeners
        processBtn.addEventListener('click', handleProcess);
        downloadReportBtn.addEventListener('click', downloadExcelReport);
        downloadSummaryBtn.addEventListener('click', downloadSummaryAsImage);
        applyFilterBtn.addEventListener('click', applyFilters);
        resetFilterBtn.addEventListener('click', resetFilters);
        searchInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') applyFilters();
            else if (event.key === 'Escape') resetFilters();
        });
        sidebarToggleBtn.addEventListener('click', () => {
            sidebar.classList.toggle('is-collapsed');
        });

        function switchPage(pageName) {
            document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
            document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
            document.getElementById(`${pageName}-page`).classList.add('active');
            document.getElementById(`nav-${pageName}`).classList.add('active');
        }

        function resetUI() {
            controlsDiv.classList.add('hidden');
            headerPlaceholder.classList.remove('hidden');
            mainTableContainer.classList.add('hidden');
        }

        async function handleProcess() {
            if (!selectedFile1 && !selectedFile2) return;
            loadingOverlay.classList.remove('hidden');
            await new Promise(resolve => setTimeout(resolve, 50)); // Allow UI to update

            try {
                const processFile = (file) => new Promise((resolve, reject) => {
                    if (!file) return resolve([]);
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        try {
                            const fileExtension = file.name.split('.').pop().toLowerCase();
                            let dataToParse;
                            if (['xlsx', 'xls', 'csv'].includes(fileExtension)) {
                                const data = new Uint8Array(e.target.result);
                                const workbook = XLSX.read(data, { type: 'array' });
                                const firstSheetName = workbook.SheetNames[0];
                                dataToParse = XLSX.utils.sheet_to_json(workbook.Sheets[firstSheetName], { header: 1 });
                            } else {
                                dataToParse = e.target.result;
                            }
                            resolve(parseData(dataToParse));
                        } catch (err) { reject(err); }
                    };
                    reader.onerror = (err) => reject(err);
                    if (['xlsx', 'xls', 'csv'].includes(file.name.split('.').pop().toLowerCase())) {
                        reader.readAsArrayBuffer(file);
                    } else {
                        reader.readAsText(file);
                    }
                });

                const [results1, results2] = await Promise.all([processFile(selectedFile1), processFile(selectedFile2)]);
                transactionData = [...results1, ...results2].sort((a, b) => new Date(a.date) - new Date(b.date));
                transactionData.forEach((tx, index) => tx.no = index + 1);
                
                currentFilteredData = transactionData;
                currentPage = 1;
                
                populateFilterDropdowns();
                updateDisplay();
            } catch (error) {
                console.error("Error processing files:", error);
                mainTableContainer.innerHTML = `<div class="text-center py-10 px-4 text-red-600 bg-red-100 rounded-lg"><strong>Error:</strong> Failed to process files. Please check the console for details.</div>`;
                mainTableContainer.classList.remove('hidden');
            } finally {
                loadingOverlay.classList.add('hidden');
                processBtn.classList.add('hidden');
            }
        }

        function parseData(data) {
            if (Array.isArray(data)) {
                let headerRowIndex = -1;
                for (let i = 0; i < data.length; i++) {
                    if (data[i] && Array.isArray(data[i]) && data[i].some(cell => typeof cell === 'string' && cell.toUpperCase().trim() === 'TRANSACTION DETAILS')) {
                        headerRowIndex = i;
                        break;
                    }
                }
                if (headerRowIndex !== -1) return parseStandardTable(data, headerRowIndex);
            }
            
            let lines = [];
            if (Array.isArray(data)) lines = data.flat().filter(cell => typeof cell === 'string');
            else if (typeof data === 'string') lines = data.split(/\r?\n/);
            return parseLines(lines);
        }
        
        function parseStandardTable(rows, headerRowIndex) {
            const parsedData = [];
            const headers = rows[headerRowIndex].map(h => typeof h === 'string' ? h.trim().toUpperCase() : '');
            const detailsIndex = headers.indexOf('TRANSACTION DETAILS');
            if (detailsIndex === -1) return [];

            const dateIndex = headers.indexOf('DATE'), moneyInIndex = headers.indexOf('MONEY IN'), moneyOutIndex = headers.indexOf('MONEY OUT'), ccyIndex = headers.indexOf('CCY');

            for (let i = headerRowIndex + 1; i < rows.length; i++) {
                const row = rows[i];
                if (!row || !row[detailsIndex] || typeof row[detailsIndex] !== 'string') continue;
                let txData = parseSingleTransactionLine(row[detailsIndex]);
                if (!txData) continue;

                if (dateIndex !== -1 && row[dateIndex]) {
                    txData.date = typeof row[dateIndex] === 'number' ? new Date(1899, 11, 30, 0, 0, 0, 0).setDate(new Date(1899, 11, 30, 0, 0, 0, 0).getDate() + row[dateIndex]) : new Date(row[dateIndex]);
                    txData.date = new Date(txData.date).toLocaleDateString('en-CA');
                }
                
                const moneyIn = moneyInIndex !== -1 ? parseFloat(String(row[moneyInIndex]).replace(/,/g, '')) || 0 : 0;
                const ccy = ccyIndex !== -1 ? (row[ccyIndex] || '').toUpperCase() : '';

                if (moneyIn > 0) {
                    if (ccy === 'USD') txData.amountUSD = moneyIn.toFixed(2);
                    if (ccy === 'KHR') txData.amountKHR = moneyIn.toFixed(2);
                }
                parsedData.push(txData);
            }
            return parsedData;
        }

        function parseLines(lines) {
            return lines.map(parseSingleTransactionLine).filter(tx => tx !== null);
        }

        function parseSingleTransactionLine(line) {
            if (typeof line !== 'string' || line.trim() === '') return null;
            const upperLine = line.toUpperCase();
            if (upperLine.includes('INTEREST PMNT') || upperLine.includes('WITHHOLDING TAX')) return null;

            let tx = { date: 'N/A', time: 'N/A', nameSender: 'N/A', bankAccNo: 'N/A', bankSender: 'ABA Bank', toName: 'N/A', toLocation: 'N/A', amountUSD: '', amountKHR: '', remark: line.trim(), currency: 'N/A' };
            
            const dateTimeMatch = line.match(/ON\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{1,2}),\s(\d{4})\s(\d{1,2}:\d{2}\s[AP]M)/i);
            if (dateTimeMatch) {
                tx.date = new Date(`${dateTimeMatch[1]} ${dateTimeMatch[2]}, ${dateTimeMatch[3]}`).toLocaleDateString('en-CA');
                tx.time = dateTimeMatch[4];
            }

            const amountMatch = line.match(/(?:Amount|ORIGINAL AMOUNT)\s([\d\.,]+)\s(USD|KHR)/i);
            if (amountMatch) {
                const amount = parseFloat(amountMatch[1].replace(/,/g, ''));
                if (amountMatch[2].toUpperCase() === 'USD') tx.amountUSD = amount.toFixed(2);
                else tx.amountKHR = amount.toFixed(2);
            }

            if (upperLine.startsWith('PAYMENT FROM')) {
                const fromMatch = line.match(/PAYMENT FROM\s(.*?)\s(?:(\d{9,})|(\*\*\*\s\*\*\*\s\d{3,}))\s(?:BANK\s(.*?)\s)?ORIGINAL/i);
                if (fromMatch) {
                    tx.nameSender = fromMatch[1];
                    tx.bankAccNo = fromMatch[2] || fromMatch[3];
                    if (fromMatch[4]) tx.bankSender = fromMatch[4];
                }
                const toMatch = line.match(/AT\s(CHE SOKUNTH)\s(\w+)/i);
                if (toMatch) [ , tx.toName, tx.toLocation] = toMatch;
            } else if (upperLine.includes('FUNDS RECEIVED FROM')) {
                 const fromMatch = line.match(/FUNDS RECEIVED FROM\s(.*?)(?=\s\()/i);
                 if(fromMatch) tx.nameSender = fromMatch[1].trim();
                 tx.toName = 'CHE SOKUNTH';
            } else {
                return null;
            }
            
            Object.keys(tx).forEach(key => { if(typeof tx[key] === 'string') tx[key] = tx[key].trim(); });
            return tx;
        }
        
        function populateFilterDropdowns() {
            const banks = [...new Set(transactionData.map(tx => tx.bankSender))].sort();
            bankFilter.innerHTML = '<option value="">Filter by Bank</option>';
            hourFilter.innerHTML = '<option value="">Filter by Hour</option>';
            banks.forEach(bank => bankFilter.innerHTML += `<option value="${bank}">${bank}</option>`);
            for(let i=0; i<24; i++) {
                hourFilter.innerHTML += `<option value="${i}">${String(i).padStart(2, '0')}:00 - ${String(i).padStart(2, '0')}:59</option>`;
            }
        }

        function applyFilters() {
            const selectedDate = dateFilter.value;
            const selectedHour = hourFilter.value;
            const selectedBank = bankFilter.value;
            const searchTerm = searchInput.value.toLowerCase();

            currentFilteredData = transactionData.filter(tx => {
                const dateMatch = !selectedDate || tx.date === selectedDate;
                let hourMatch = true;
                if (selectedHour && tx.time !== 'N/A') {
                    let [time, modifier] = tx.time.split(' ');
                    let [hours] = time.split(':');
                    if (hours === '12') hours = '00';
                    if (modifier.toUpperCase() === 'PM') hours = parseInt(hours, 10) + 12;
                    hourMatch = parseInt(hours) == parseInt(selectedHour);
                } else if (selectedHour) {
                    hourMatch = false;
                }
                const bankMatch = !selectedBank || tx.bankSender === selectedBank;
                const searchMatch = !searchTerm || Object.values(tx).some(val => String(val).toLowerCase().includes(searchTerm));
                return dateMatch && hourMatch && bankMatch && searchMatch;
            });
            currentPage = 1;
            updateDisplay();
        }

        function resetFilters() {
            searchInput.value = '';
            dateFilter.value = '';
            hourFilter.value = '';
            bankFilter.value = '';
            currentFilteredData = transactionData;
            currentPage = 1;
            updateDisplay();
        }

        function updateDisplay() {
            if (transactionData.length === 0) {
                resetUI();
                mainTableContainer.innerHTML = `<div class="text-center py-10 px-4 text-gray-500">No valid transactions found. Please ensure the uploaded file(s) contain recognizable transaction data.</div>`;
                mainTableContainer.classList.remove('hidden');
                return;
            }
            mainTableContainer.classList.remove('hidden');
            controlsDiv.classList.remove('hidden');
            headerPlaceholder.classList.add('hidden');
            switchPage('dashboard');

            renderMainTablePage();
            generateAndRenderSummaries(currentFilteredData);
            renderPagination();
            updateHeaderSummary();
        }

        function renderMainTablePage() {
            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = startIndex + rowsPerPage;
            const pageData = currentFilteredData.slice(startIndex, endIndex);

            resultsBody.innerHTML = pageData.map(tx => {
                const displayDate = tx.date !== 'N/A' ? new Date(tx.date).toLocaleDateString('en-US', { month: 'short', day: '2-digit', year: 'numeric' }) : 'N/A';
                return `<tr class="border-b border-gray-200 hover:bg-gray-100">
                    <td class="py-3 px-4">${displayDate}</td><td class="py-3 px-4">${tx.time}</td>
                    <td class="py-3 px-4">${tx.toLocation}</td><td class="py-3 px-4">${tx.bankSender}</td>
                    <td class="py-3 px-4">${tx.nameSender}</td><td class="py-3 px-4">${tx.bankAccNo}</td>
                    <td class="py-3 px-4 text-right font-mono">${tx.amountKHR ? '៛' + parseFloat(tx.amountKHR).toLocaleString('en-US', {minimumFractionDigits: 2}) : ''}</td>
                    <td class="py-3 px-4 text-right font-mono">${tx.amountUSD ? '$' + parseFloat(tx.amountUSD).toLocaleString('en-US', {minimumFractionDigits: 2}) : ''}</td>
                </tr>`;
            }).join('');
        }

        function getWeekOfMonth(date) {
            const day = date.getDate();
            if (day <= 7) return 'Week 1 (1-7)';
            if (day <= 14) return 'Week 2 (8-14)';
            if (day <= 21) return 'Week 3 (15-21)';
            return 'Week 4 (22-End)';
        }
        
        function generateAndRenderSummaries(data) {
            const locSummary = {}, bankSummary = {}, weeklySummary = {};
            data.forEach(tx => {
                if (tx.date === 'N/A') return;
                const txDate = new Date(tx.date);
                const monthYear = tx.date.substring(0, 7);
                const location = tx.toLocation || 'N/A';
                const amountKHR = parseFloat(tx.amountKHR || 0);
                const amountUSD = parseFloat(tx.amountUSD || 0);

                // Location Summary
                const locKey = `${location}|${monthYear}`;
                if (!locSummary[locKey]) locSummary[locKey] = { totalKHR: 0, totalUSD: 0, count: 0 };
                locSummary[locKey].totalKHR += amountKHR; locSummary[locKey].totalUSD += amountUSD; locSummary[locKey].count++;
                
                // Bank Summary
                const bankKey = `${tx.bankSender || 'N/A'}|${monthYear}`;
                if (!bankSummary[bankKey]) bankSummary[bankKey] = { totalKHR: 0, totalUSD: 0, count: 0 };
                bankSummary[bankKey].totalKHR += amountKHR; bankSummary[bankKey].totalUSD += amountUSD; bankSummary[bankKey].count++;

                // Weekly Summary
                const week = getWeekOfMonth(txDate);
                const weeklyKey = `${location}|${monthYear}|${week}`;
                if (!weeklySummary[weeklyKey]) weeklySummary[weeklyKey] = { totalKHR: 0, totalUSD: 0, count: 0 };
                weeklySummary[weeklyKey].totalKHR += amountKHR; weeklySummary[weeklyKey].totalUSD += amountUSD; weeklySummary[weeklyKey].count++;
            });

            locationSummaryData = Object.entries(locSummary).map(([key, d], i) => ({ no: i + 1, location: key.split('|')[0], monthYear: key.split('|')[1], ...d }));
            bankSummaryData = Object.entries(bankSummary).map(([key, d], i) => ({ no: i + 1, bankName: key.split('|')[0], monthYear: key.split('|')[1], ...d, note: '' }));
            weeklySummaryData = Object.entries(weeklySummary).map(([key, d], i) => {
                const [location, monthYear, week] = key.split('|');
                return { no: i + 1, location, monthYear, week, ...d };
            }).sort((a,b) => a.location.localeCompare(b.location) || a.monthYear.localeCompare(b.monthYear) || a.week.localeCompare(b.week));
            
            const totalUSD = data.reduce((acc, tx) => acc + parseFloat(tx.amountUSD || 0), 0);
            const totalKHR = data.reduce((acc, tx) => acc + parseFloat(tx.amountKHR || 0), 0);

            const formatCurrency = (val, currency) => `${currency}${val.toLocaleString('en-US', {minimumFractionDigits: 2})}`;

            resultsFooter.innerHTML = `<tr class="border-t-2 border-gray-400"><td colspan="6" class="p-3 text-right">Filtered Total:</td><td class="p-3 text-right font-mono">${formatCurrency(totalKHR, '៛')}</td><td class="p-3 text-right font-mono">${formatCurrency(totalUSD, '$')}</td></tr>`;
            
            weeklySummaryBody.innerHTML = weeklySummaryData.map(s => `<tr class="border-b"><td class="p-3">${s.no}</td><td class="p-3">${s.location}</td><td class="p-3">${s.monthYear}</td><td class="p-3">${s.week}</td><td class="p-3 text-right font-mono">${formatCurrency(s.totalKHR, '៛')}</td><td class="p-3 text-right font-mono">${formatCurrency(s.totalUSD, '$')}</td><td class="p-3 text-center">${s.count}</td></tr>`).join('');
            locationSummaryBody.innerHTML = locationSummaryData.map(s => `<tr class="border-b"><td class="p-3">${s.no}</td><td class="p-3">${s.location}</td><td class="p-3">${s.monthYear}</td><td class="p-3 text-right font-mono">${formatCurrency(s.totalKHR, '៛')}</td><td class="p-3 text-right font-mono">${formatCurrency(s.totalUSD, '$')}</td><td class="p-3 text-center">${s.count}</td></tr>`).join('');
            bankSummaryBody.innerHTML = bankSummaryData.map(s => `<tr class="border-b"><td class="p-3">${s.no}</td><td class="p-3">${s.bankName}</td><td class="p-3">${s.monthYear}</td><td class="p-3 text-center">${s.count}</td><td class="p-3 text-right font-mono">${formatCurrency(s.totalKHR, '៛')}</td><td class="p-3 text-right font-mono">${formatCurrency(s.totalUSD, '$')}</td><td class="p-3">${s.note}</td></tr>`).join('');
            
            const renderFooter = (footerEl, colSpan, khr, usd, count) => {
                footerEl.innerHTML = `<tr class="border-t-2 border-gray-400"><td colspan="${colSpan}" class="p-3 text-right">Filtered Total:</td><td class="p-3 text-right font-mono">${formatCurrency(khr, '៛')}</td><td class="p-3 text-right font-mono">${formatCurrency(usd, '$')}</td><td class="p-3 text-center">${count}</td></tr>`;
            };
            renderFooter(weeklySummaryFooter, 4, totalKHR, totalUSD, data.length);
            renderFooter(locationSummaryFooter, 3, totalKHR, totalUSD, data.length);
            bankSummaryFooter.innerHTML = `<tr class="border-t-2 border-gray-400"><td colspan="3" class="p-3 text-right">Filtered Total:</td><td class="p-3 text-center">${data.length}</td><td class="p-3 text-right font-mono">${formatCurrency(totalKHR, '៛')}</td><td class="p-3 text-right font-mono">${formatCurrency(totalUSD, '$')}</td><td class="p-3"></td></tr>`;
        }

        function updateHeaderSummary() {
            const grandTotalUSD = transactionData.reduce((acc, tx) => acc + parseFloat(tx.amountUSD || 0), 0);
            const grandTotalKHR = transactionData.reduce((acc, tx) => acc + parseFloat(tx.amountKHR || 0), 0);
            summaryDiv.innerHTML = `<span>Grand Total Txns: <span class="text-indigo-600 font-bold">${transactionData.length}</span></span>`;
            if (grandTotalUSD > 0) summaryDiv.innerHTML += `<span class="ml-6">Total USD: <span class="text-green-600 font-bold">$${grandTotalUSD.toLocaleString('en-US', { minimumFractionDigits: 2 })}</span></span>`;
            if (grandTotalKHR > 0) summaryDiv.innerHTML += `<span class="ml-6">Total KHR: <span class="text-green-600 font-bold">៛${grandTotalKHR.toLocaleString('en-US', { minimumFractionDigits: 2 })}</span></span>`;
        }

        function renderPagination() {
            const totalPages = Math.ceil(currentFilteredData.length / rowsPerPage);
            paginationControls.innerHTML = '';
            if (totalPages <= 1) return;

            let paginationHTML = `
                <div class="text-sm text-gray-700">
                    Showing <span class="font-medium">${(currentPage - 1) * rowsPerPage + 1}</span> to <span class="font-medium">${Math.min(currentPage * rowsPerPage, currentFilteredData.length)}</span> of <span class="font-medium">${currentFilteredData.length}</span> results
                </div>
                <div class="flex space-x-2">
                    <button id="prev-page" class="pagination-btn" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>
                    <button id="next-page" class="pagination-btn" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>
                </div>
            `;
            paginationControls.innerHTML = paginationHTML;
            document.getElementById('prev-page').addEventListener('click', () => { if(currentPage > 1) { currentPage--; updateDisplay(); } });
            document.getElementById('next-page').addEventListener('click', () => { if(currentPage < totalPages) { currentPage++; updateDisplay(); } });
        }
        
        function createSummaryWorksheet() {
            const summary_data_array = [];
            
            // Weekly Summary
            summary_data_array.push([{v: 'Weekly Summary by Location', s: { font: { bold: true, sz: 14}}}]);
            summary_data_array.push(['No.', 'Location', 'Month-Year', 'Week', 'Total KHR', 'Total USD', 'Total Transactions']);
            weeklySummaryData.forEach(row => { summary_data_array.push([row.no, row.location, row.monthYear, row.week, row.totalKHR, row.totalUSD, row.count]); });
            summary_data_array.push(['', '', '', 'Sub-Total:', weeklySummaryData.reduce((a,b) => a + b.totalKHR, 0), weeklySummaryData.reduce((a,b) => a + b.totalUSD, 0), weeklySummaryData.reduce((a,b) => a + b.count, 0)]);
            summary_data_array.push([]);

            // Location Summary
            summary_data_array.push([{v: 'Monthly Summary by Location', s: { font: { bold: true, sz: 14}}}]);
            summary_data_array.push(['No.', 'Location', 'Month-Year', 'Total KHR', 'Total USD', 'Total Transactions']);
            locationSummaryData.forEach(row => { summary_data_array.push([row.no, row.location, row.monthYear, row.totalKHR, row.totalUSD, row.count]); });
            summary_data_array.push(['', '', 'Sub-Total:', locationSummaryData.reduce((a,b) => a + b.totalKHR, 0), locationSummaryData.reduce((a,b) => a + b.totalUSD, 0), locationSummaryData.reduce((a,b) => a + b.count, 0)]);
            summary_data_array.push([]);
            
            // Bank Summary
            summary_data_array.push([{v: 'Monthly Summary by Bank Sender', s: { font: { bold: true, sz: 14}}}]);
            summary_data_array.push(['No.', 'Bank Name', 'Month-Year', 'Txn Count', 'Total KHR', 'Total USD', 'Note']);
            bankSummaryData.forEach(row => { summary_data_array.push([row.no, row.bankName, row.monthYear, row.count, row.totalKHR, row.totalUSD, row.note]); });
            summary_data_array.push(['', '', 'Sub-Total:', '', bankSummaryData.reduce((a,b) => a + b.count, 0), bankSummaryData.reduce((a,b) => a + b.totalKHR, 0), bankSummaryData.reduce((a,b) => a + b.totalUSD, 0), '']);
            
            const ws_summary = XLSX.utils.aoa_to_sheet(summary_data_array);
            ws_summary['!cols'] = [ {wch:5}, {wch:20}, {wch:15}, {wch:15}, {wch:18}, {wch:18}, {wch:18} ];
            const setNumberFormat = (ws, rowIdx, khrCol, usdCol) => { 
                if(ws[`${khrCol}${rowIdx}`]) ws[`${khrCol}${rowIdx}`].z = '"៛"#,##0.00'; 
                if(ws[`${usdCol}${rowIdx}`]) ws[`${usdCol}${rowIdx}`].z = '"$"#,##0.00'; 
            };
            
            let offset = 3;
            weeklySummaryData.forEach((r, i) => setNumberFormat(ws_summary, i + offset, 'E', 'F'));
            setNumberFormat(ws_summary, weeklySummaryData.length + offset, 'E', 'F');
            offset += weeklySummaryData.length + 3;

            locationSummaryData.forEach((r, i) => setNumberFormat(ws_summary, i + offset, 'D', 'E'));
            setNumberFormat(ws_summary, locationSummaryData.length + offset, 'D', 'E');
            offset += locationSummaryData.length + 3;

            bankSummaryData.forEach((r, i) => setNumberFormat(ws_summary, i + offset, 'E', 'F'));
            setNumberFormat(ws_summary, bankSummaryData.length + offset, 'E', 'F');
            
            return ws_summary;
        }

        function downloadSummaryAsImage() {
            if (transactionData.length === 0) return;
            const elementToCapture = document.getElementById('reports-content-to-capture');
            const buttonToHide = document.getElementById('downloadSummaryBtn');
            buttonToHide.classList.add('hidden');
            html2canvas(elementToCapture, { scale: 2, useCORS: true, backgroundColor: '#ffffff' }).then(canvas => {
                const link = document.createElement('a');
                link.download = 'Summary_Report.png';
                link.href = canvas.toDataURL('image/png');
                link.click();
            }).catch(err => console.error("Error capturing image:", err))
              .finally(() => buttonToHide.classList.remove('hidden'));
        }

        function downloadExcelReport() {
            if (transactionData.length === 0) return;
            const transactionsHeaders = ['Date', 'Time', 'Location', 'From Bank', 'From Name', 'From Acc No.', 'Amount (KHR)', 'Amount (USD)'];
            const transactionsFormatted = transactionData.map(row => ({
                'Date': row.date !== 'N/A' ? new Date(row.date) : 'N/A', 'Time': row.time, 'Location': row.toLocation, 'From Bank': row.bankSender,
                'From Name': row.nameSender, 'From Acc No.': row.bankAccNo, 'Amount (KHR)': row.amountKHR ? parseFloat(row.amountKHR) : null,
                'Amount (USD)': row.amountUSD ? parseFloat(row.amountUSD) : null
            }));
            const ws_transactions = XLSX.utils.json_to_sheet(transactionsFormatted, { header: transactionsHeaders });
            ws_transactions['!cols'] = [ {wch:12}, {wch:12}, {wch:15}, {wch:30}, {wch:30}, {wch:20}, {wch:18}, {wch:18} ];
            transactionsFormatted.forEach((row, index) => {
                const r = index + 2;
                if (row['Date'] !== 'N/A') ws_transactions[`A${r}`].z = 'm/d/yy';
                if (row['Amount (KHR)']) ws_transactions[`G${r}`].z = '"៛"#,##0.00';
                if (row['Amount (USD)']) ws_transactions[`H${r}`].z = '"$"#,##0.00';
            });

            const ws_summary = createSummaryWorksheet();
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws_transactions, "All Transactions");
            XLSX.utils.book_append_sheet(wb, ws_summary, "Summary Report");
            XLSX.writeFile(wb, "Full_Report.xlsx");
        }
    </script>
</body>
</html>
